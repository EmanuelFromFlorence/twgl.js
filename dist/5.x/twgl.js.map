{"version":3,"sources":["webpack://twgl/webpack/universalModuleDefinition","webpack://twgl/webpack/bootstrap","webpack://twgl/./src/attributes.js","webpack://twgl/./src/draw.js","webpack://twgl/./src/framebuffers.js","webpack://twgl/./src/helper.js","webpack://twgl/./src/programs.js","webpack://twgl/./src/textures.js","webpack://twgl/./src/twgl-base.js","webpack://twgl/./src/twgl.js","webpack://twgl/./src/typedarrays.js","webpack://twgl/./src/utils.js","webpack://twgl/./src/vertex-arrays.js"],"names":["STATIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","gl","undefined","defaults","attribPrefix","setAttributePrefix","prefix","setDefaults","newDefaults","helper","copyExistingProperties","setBufferFromTypedArray","type","buffer","array","drawType","bindBuffer","bufferData","createBufferFromTypedArray","typedArray","isBuffer","createBuffer","isIndices","name","getNormalizationForTypedArray","Int8Array","Uint8Array","getNormalizationForTypedArrayType","typedArrayType","getArray","length","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","Error","getNumComponents","arrayName","size","makeTypedArray","typedArrays","isArrayBuffer","Array","isArray","Type","Uint16Array","Float32Array","createAttribsFromArrays","arrays","attribs","Object","keys","forEach","attribName","attrib","value","normalization","WebGLBuffer","normalize","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","getGLTypeForTypedArrayType","getGLTypeForTypedArray","stride","offset","divisor","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getBytesPerValueForGLType","positionKeys","getNumElementsFromNonIndexedArrays","key","ii","numElements","getNumElementsFromAttributes","getBufferParameter","bytesPerValue","totalElements","createBufferInfoFromArrays","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","elementType","createBufferFromArray","createBuffersFromArrays","buffers","TRIANGLES","drawBufferInfo","count","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","bindVertexArray","programs","setBuffersAndAttributes","setUniforms","uniforms","FRAMEBUFFER","RENDERBUFFER","TEXTURE_2D","DEPTH_COMPONENT","RGBA","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE","LINEAR","defaultAttachments","format","min","wrap","attachmentsByFormat","getAttachmentPointForFormat","internalFormat","renderbufferFormats","isRenderbufferFormat","MAX_COLOR_ATTACHMENT_POINTS","isColorAttachmentPoint","attachmentPoint","createFramebufferInfo","attachments","width","height","target","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","usedColorAttachmentsPoints","framebufferInfo","framebuffer","attachmentOptions","i","attachment","samples","push","createRenderbuffer","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","textureOptions","auto","minMag","mag","wrapS","wrapT","textures","createTexture","isRenderbuffer","framebufferRenderbuffer","isTexture","layer","framebufferTextureLayer","level","framebufferTexture2D","drawBuffers","resizeFramebufferInfo","ndx","resizeTexture","bindFramebufferInfo","viewport","copyNamedProperties","names","src","dst","hasOwnProperty","error","console","warn","isTypeWeakMaps","Map","isType","weakMap","get","WeakMap","set","isOfType","s","prototype","toString","call","substring","t","WebGLRenderbuffer","isShader","WebGLShader","WebGLTexture","isSampler","WebGLSampler","getElementById","id","document","TEXTURE0","DYNAMIC_DRAW","UNIFORM_BUFFER","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK","COMPILE_STATUS","LINK_STATUS","FRAGMENT_SHADER","VERTEX_SHADER","SEPARATE_ATTRIBS","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","location","v","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","utils","isWebGL2","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","Int32Array","index","setter","arraySetter","cols","Uint32Array","rows","floatAttribSetter","b","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","attrTypeMap","errorRE","addLineNumbersWithError","log","lineOffset","matches","matchAll","lineNoToErrorMap","map","m","lineNo","parseInt","next","end","msg","split","line","err","join","spaceRE","prepShaderSource","shaderSource","replace","reportError","progOptions","errorCallback","callback","setTimeout","errors","loadShader","shaderType","shader","createShader","compileShader","checkShaderStatus","deleteShader","errFn","compiled","getShaderParameter","lastError","getShaderInfoLog","getShaderSource","glEnumToString","getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","opt","attribLocations","options","args","defaultShaderType","getShaderTypeFromScriptType","scriptType","indexOf","deleteShaders","shaders","wait","ms","Promise","resolve","createProgram","realShaders","newShaders","elem","text","attachShader","bindAttribLocation","varyings","linkProgram","checkForProgramLinkCompletionAsync","checkProgramStatus","deleteProgram","createProgramAsync","reject","programOptions","createProgramInfoAsync","createProgramInfo","ext","getExtension","checkFn","getProgramParameter","COMPLETION_STATUS_KHR","waitTime","success","linked","getProgramInfoLog","createShaderFromScript","scriptId","opt_shaderType","shaderScript","createProgramFromScripts","shaderScriptIds","createProgramFromSources","shaderSources","isBuiltIn","info","startsWith","tokenRE","isDigit","addSetterToUniformTree","fullPath","node","uniformSetters","tokens","filter","tokenNdx","path","token","isArrayIndex","accessor","isLastToken","child","setUniformTree","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","endsWith","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","createTransformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","bindTransformFeedbackInfo","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","createTransformFeedback","tf","bindTransformFeedback","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","arraySuffixRE","pad","padding","createUniformBlockUniformSetter","view","totalRows","row","col","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","ArrayBuffer","uniformBufferIndex","uniformBlockBinding","setters","setterTree","uniformNdx","byteLength","uniformView","asFloat","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","bufferBindIndex","setUniformBlock","setBlockUniforms","values","tree","prop","actualSetters","numArgs","aNdx","setUniformsAndBindTextures","createAttributeSetters","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","setAttributes","createProgramInfoFromProgram","notIdRE","source","script","origCallback","textureColor","crossOrigin","getShared2DContext","s_ctx","createElement","getContext","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","NEAREST","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","f","numColorComponents","s_textureInternalFormatInfo","getTextureInternalFormatInfo","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","isPowerOf2","canGenerateMipmap","canFilter","getNumComponentsForFormat","getTextureTypeForArrayType","defaultType","guessDimensions","Math","sqrt","setDefaultTextureColor","color","setPackState","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","setSkipStateToDefault","setTextureSamplerParameters","parameteriFn","wrapR","minLod","maxLod","baseLevel","maxLevel","setTextureParameters","tex","texParameteri","setSamplerParameters","samplerParameteri","createSampler","createSamplers","samplerOptions","samplers","make1Pixel","setTextureFilteringForSize","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","a","setTextureFromElement","element","formatType","imgWidth","imgHeight","slices","nodeName","ctx","canvas","xOffset","yOffset","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","max","depth","xMult","yMult","texImage3D","d","srcX","srcY","texSubImage3D","noop","urlIsSameOrigin","url","href","hostname","port","protocol","localOrigin","URL","origin","urlOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","loadImage","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","addEventListener","ImageBitmap","bm","cb","mode","fetch","response","ok","blob","bitmap","e","isTexImageSource","obj","ImageData","HTMLElement","loadAndUseImage","setTextureTo1PixelColor","loadTextureFromUrl","loadCubemapFromUrls","urls","numToLoad","imgs","uploadImg","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","slice","setTextureFromArray","getTypedArrayTypeForGLType","Uint8ClampedArray","dimensions","cbrt","unpackAlignment","elementsPerElement","faceSize","subarray","setEmptyTexture","isAsyncSrc","createTextures","numDownloading","images","callCallbackIfReady","onLoadFn","addExtensionsToContext","attributes","setAttributeDefaults_","setTextureDefaults_","prefixRE","addExtensionToContext","extensionName","enums","fnSuffix","exec","enumSuffix","isFunc","suffix","origFn","apply","arguments","constructor","supportedExtensions","create3DContext","context","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","clientWidth","clientHeight","glTypeToTypedArray","tt","Int16Array","CTOR","SharedArrayBuffer","isArrayBufferOrSharedArrayBuffer","texStorage2D","isWebGL1","haveEnumsForType","addEnums","existing","createVertexArrayInfo","programInfos","vao","createVertexArray","createVAOAndSetAttributes","createVAOFromBufferInfo"],"mappings":"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","file":"twgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/twgl-base.js\");\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\n\n/**\n * Low level attribute and buffer related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/attributes\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (helper.isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (typedArrays.isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (typedArrays.isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = typedArrays.getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = typedArrays.getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE)  return 1;  // eslint-disable-line\n  if (type === SHORT)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT) return 2;  // eslint-disable-line\n  if (type === INT)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT)   return 4;  // eslint-disable-line\n  if (type === FLOAT)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nexport {\n  createAttribsFromArrays,\n  createBuffersFromArrays,\n  createBufferFromArray,\n  createBufferFromTypedArray,\n  createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray,\n\n  setAttributePrefix,\n\n  setDefaults as setAttributeDefaults_,\n  getNumComponents as getNumComponents_,\n  getArray as getArray_,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    programs.setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nexport {\n  drawBufferInfo,\n  drawObjectList,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\n\n/**\n * Framebuffer related functions\n *\n * For backward compatibility they are available at both `twgl.framebuffer` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/framebuffers\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = textures.createTexture(gl, textureOptions);\n      }\n    }\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (helper.isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || helper.isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (helper.isTexture(gl, attachment)) {\n      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nexport {\n  bindFramebufferInfo,\n  createFramebufferInfo,\n  resizeFramebufferInfo,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && isType(t, 'WebGLShader');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\nexport {\n  copyExistingProperties,\n  copyNamedProperties,\n  error,\n  warn,\n  isBuffer,\n  isRenderbuffer,\n  isShader,\n  isTexture,\n  isSampler,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = helper.error;\nconst warn = helper.warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return utils.isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (helper.isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return utils.isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (helper.isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ProgramOptions} progOptions\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, progOptions) {\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Load the shader source\n  gl.shaderSource(shader, prepShaderSource(shaderSource).shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  if (!progOptions.callback && !checkShaderStatus(gl, shaderType, shader, progOptions.errorCallback)) {\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {bool} true if shader is ok.\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${utils.glEnumToString(gl, shaderType)}: ${lastError}`);\n  }\n  return compiled;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback && opt_attribs.errors) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions);\n      newShaders.push(shader);\n    }\n    if (helper.isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    deleteShaders(gl, newShaders);\n    return reportError(progOptions, \"not enough shaders for program\");\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program);\n  if (progOptions.callback) {\n    checkForProgramLinkCompletionAsync(gl, program, progOptions);\n    return null;\n  } else {\n    if (!checkProgramStatus(gl, program, progOptions.errorCallback)) {\n      gl.deleteProgram(program);\n      deleteShaders(gl, newShaders);\n      return null;\n    }\n    return program;\n  }\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nfunction createProgramAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, program) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(program);\n      }\n    };\n    createProgram(gl, shaders, programOptions);\n  });\n}\n\n/**\n * Same as createProgramInfo but returns a promise\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, programInfo) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(programInfo);\n      }\n    };\n    createProgramInfo(gl, shaders, programOptions);\n  });\n}\n\n\n/**\n * Asynchronously wait for program to link.\n * Note: if 'KHR_parallel_shader_compile' extension does not\n * exist then compilation will not be truly async.\n * @param {WebGLRenderingContext} gl The context\n * @param {WebGLProgram} program The program\n * @param {module:twgl.ProgramOptions} progOptions Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @private\n */\nasync function checkForProgramLinkCompletionAsync(gl, program, progOptions) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n\n  const success = checkProgramStatus(gl, program, progOptions.errorCallback);\n  const err = success ? undefined : progOptions.errors.join('\\n');\n  if (!success) {\n    const errFn = progOptions.errorCallback || error;\n    errFn(err);\n    gl.deleteProgram(program);\n    // TODO: delete shaders, but only shaders that were created newly for this\n    // program\n    program = null;\n  }\n  progOptions.callback(err, program);\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {bool} true if program is ok\n * @private\n */\nfunction checkProgramStatus(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n  }\n  return linked;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ProgramOptions} [progOptions] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, progOptions) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    return reportError(progOptions, `unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    return reportError(progOptions, 'unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, progOptions);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!progOptions.callback && !shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (utils.isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      let programInfo;\n      if (!err) {\n        programInfo = createProgramInfoFromProgram(gl, program);\n      }\n      origCallback(err, programInfo);\n    };\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nexport {\n  createAttributeSetters,\n\n  createProgram,\n  createProgramAsync,\n  createProgramFromScripts,\n  createProgramFromSources,\n  createProgramInfo,\n  createProgramInfoAsync,\n  createProgramInfoFromProgram,\n  createUniformSetters,\n  createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram,\n  createUniformBlockInfo,\n\n  createTransformFeedback,\n  createTransformFeedbackInfo,\n  bindTransformFeedbackInfo,\n\n  setAttributes,\n  setBuffersAndAttributes,\n  setUniforms,\n  setUniformsAndBindTextures,\n  setUniformBlock,\n  setBlockUniforms,\n  bindUniformBlock,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level texture related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.textures` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/textures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = typedArrays.isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT, UNSIGNED_SHORT], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT, UNSIGNED_INT], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!utils.isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return typedArrays.getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (utils.isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || helper.isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      helper.error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder(gl).forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = typedArrays.getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + utils.glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nexport {\n  setDefaults as setTextureDefaults_,\n\n  createSampler,\n  createSamplers,\n  setSamplerParameters,\n\n  createTexture,\n  setEmptyTexture,\n  setTextureFromArray,\n  loadTextureFromUrl,\n  setTextureFromElement,\n  setTextureFilteringForSize,\n  setTextureParameters,\n  setDefaultTextureColor,\n  createTextures,\n  resizeTexture,\n\n  canGenerateMipmap,\n  canFilter,\n  getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat,\n};\n\n","export * from './twgl.js';\n\n\n\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as attributes from './attributes.js';\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\nimport * as utils from './utils.js';\n\nimport * as draw from './draw.js';\nimport * as framebuffers from './framebuffers.js';\nimport * as programs from './programs.js';\nimport * as typedarrays from './typedarrays.js';\nimport * as vertexArrays from './vertex-arrays.js';\n\n/**\n * The main TWGL module.\n *\n * For most use cases you shouldn't need anything outside this module.\n * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n *\n * @module twgl\n * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n * @borrows module:twgl/draw.drawObjectList as drawObjectList\n * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n * @borrows module:twgl/programs.setUniforms as setUniforms\n * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n * @borrows module:twgl/textures.createTexture as createTexture\n * @borrows module:twgl/textures.resizeTexture as resizeTexture\n * @borrows module:twgl/textures.createTextures as createTextures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  attributes.setAttributeDefaults_(newDefaults);  // eslint-disable-line\n  textures.setTextureDefaults_(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  utils.glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          helper.warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    utils.glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport {\n  addExtensionsToContext,\n  getContext,\n  getWebGLContext,\n  resizeCanvasToDisplaySize,\n  setDefaults,\n\n  attributes,\n  draw,\n  framebuffers,\n  programs,\n  textures,\n  typedarrays,\n  utils,\n  vertexArrays,\n};\n\n// function notPrivate(name) {\n//   return name[name.length - 1] !== '_';\n// }\n//\n// function copyPublicProperties(src, dst) {\n//   Object.keys(src).filter(notPrivate).forEach(function(key) {\n//     dst[key] = src[key];\n//   });\n//   return dst;\n// }\n\nexport * from './attributes.js';\nexport * from './draw.js';\nexport * from './framebuffers.js';\nexport * from './programs.js';\nexport * from './textures.js';\nexport * from './typedarrays.js';\nexport * from './utils.js';\nexport * from './vertex-arrays.js';\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader typed array related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.typedArray` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/typedArray\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nexport {\n  getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType,\n  isArrayBuffer,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nexport {\n  glEnumToString,\n  isWebGL1,\n  isWebGL2,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  programs.setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nexport {\n  createVertexArrayInfo,\n  createVAOAndSetAttributes,\n  createVAOFromBufferInfo,\n};\n\n"],"sourceRoot":""}